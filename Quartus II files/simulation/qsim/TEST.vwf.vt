// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/27/2019 17:34:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TEST
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TEST_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg nRST;
reg START;
// wires                                               
wire LAT;
wire LOADOPS;
wire READY;
wire S0;
wire S1;

// assign statements (if any)                          
TEST i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.LAT(LAT),
	.LOADOPS(LOADOPS),
	.nRST(nRST),
	.READY(READY),
	.S0(S0),
	.S1(S1),
	.START(START)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// START
initial
begin
	START = 1'b0;
	START = #40000 1'b1;
	START = #50000 1'b0;
end 

// nRST
initial
begin
	nRST = 1'b1;
end 
endmodule

