// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/28/2019 12:39:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TEST4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TEST4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg H;
reg [31:0] OPERANDO1;
reg RST;
reg Z;
// wires                                               
wire [31:0] N;
wire [31:0] RESULT;

// assign statements (if any)                          
TEST4 i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.H(H),
	.N(N),
	.OPERANDO1(OPERANDO1),
	.RESULT(RESULT),
	.RST(RST),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// OPERANDO1[ 31 ]
initial
begin
	OPERANDO1[31] = 1'b1;
	OPERANDO1[31] = #320000 1'b0;
	OPERANDO1[31] = #320000 1'b1;
	OPERANDO1[31] = #320000 1'b0;
end 
// OPERANDO1[ 30 ]
initial
begin
	OPERANDO1[30] = 1'b1;
	OPERANDO1[30] = #640000 1'b0;
	OPERANDO1[30] = #320000 1'b1;
end 
// OPERANDO1[ 29 ]
initial
begin
	OPERANDO1[29] = 1'b1;
	OPERANDO1[29] = #320000 1'b0;
	OPERANDO1[29] = #320000 1'b1;
	OPERANDO1[29] = #320000 1'b0;
end 
// OPERANDO1[ 28 ]
initial
begin
	OPERANDO1[28] = 1'b0;
	OPERANDO1[28] = #640000 1'b1;
end 
// OPERANDO1[ 27 ]
initial
begin
	OPERANDO1[27] = 1'b1;
	OPERANDO1[27] = #640000 1'b0;
end 
// OPERANDO1[ 26 ]
initial
begin
	OPERANDO1[26] = 1'b1;
	OPERANDO1[26] = #320000 1'b0;
	OPERANDO1[26] = #640000 1'b1;
end 
// OPERANDO1[ 25 ]
initial
begin
	OPERANDO1[25] = 1'b1;
	OPERANDO1[25] = #320000 1'b0;
end 
// OPERANDO1[ 24 ]
initial
begin
	OPERANDO1[24] = 1'b0;
	OPERANDO1[24] = #320000 1'b1;
end 
// OPERANDO1[ 23 ]
initial
begin
	OPERANDO1[23] = 1'b1;
	OPERANDO1[23] = #320000 1'b0;
	OPERANDO1[23] = #640000 1'b1;
end 
// OPERANDO1[ 22 ]
initial
begin
	OPERANDO1[22] = 1'b0;
	OPERANDO1[22] = #640000 1'b1;
	OPERANDO1[22] = #320000 1'b0;
end 
// OPERANDO1[ 21 ]
initial
begin
	OPERANDO1[21] = 1'b0;
	OPERANDO1[21] = #640000 1'b1;
end 
// OPERANDO1[ 20 ]
initial
begin
	OPERANDO1[20] = 1'b0;
	OPERANDO1[20] = #320000 1'b1;
	OPERANDO1[20] = #640000 1'b0;
end 
// OPERANDO1[ 19 ]
initial
begin
	OPERANDO1[19] = 1'b0;
	OPERANDO1[19] = #960000 1'b1;
end 
// OPERANDO1[ 18 ]
initial
begin
	OPERANDO1[18] = 1'b1;
	OPERANDO1[18] = #320000 1'b0;
	OPERANDO1[18] = #320000 1'b1;
end 
// OPERANDO1[ 17 ]
initial
begin
	OPERANDO1[17] = 1'b0;
	OPERANDO1[17] = #960000 1'b1;
end 
// OPERANDO1[ 16 ]
initial
begin
	OPERANDO1[16] = 1'b0;
	OPERANDO1[16] = #320000 1'b1;
	OPERANDO1[16] = #320000 1'b0;
end 
// OPERANDO1[ 15 ]
initial
begin
	OPERANDO1[15] = 1'b0;
	OPERANDO1[15] = #320000 1'b1;
end 
// OPERANDO1[ 14 ]
initial
begin
	OPERANDO1[14] = 1'b1;
	OPERANDO1[14] = #960000 1'b0;
end 
// OPERANDO1[ 13 ]
initial
begin
	OPERANDO1[13] = 1'b1;
	OPERANDO1[13] = #640000 1'b0;
	OPERANDO1[13] = #320000 1'b1;
end 
// OPERANDO1[ 12 ]
initial
begin
	OPERANDO1[12] = 1'b1;
	OPERANDO1[12] = #960000 1'b0;
end 
// OPERANDO1[ 11 ]
initial
begin
	OPERANDO1[11] = 1'b0;
	OPERANDO1[11] = #640000 1'b1;
	OPERANDO1[11] = #320000 1'b0;
end 
// OPERANDO1[ 10 ]
initial
begin
	OPERANDO1[10] = 1'b1;
	OPERANDO1[10] = #320000 1'b0;
	OPERANDO1[10] = #320000 1'b1;
	OPERANDO1[10] = #320000 1'b0;
end 
// OPERANDO1[ 9 ]
initial
begin
	OPERANDO1[9] = 1'b1;
	OPERANDO1[9] = #640000 1'b0;
	OPERANDO1[9] = #320000 1'b1;
end 
// OPERANDO1[ 8 ]
initial
begin
	OPERANDO1[8] = 1'b0;
	OPERANDO1[8] = #320000 1'b1;
end 
// OPERANDO1[ 7 ]
initial
begin
	OPERANDO1[7] = 1'b0;
	OPERANDO1[7] = #320000 1'b1;
	OPERANDO1[7] = #320000 1'b0;
end 
// OPERANDO1[ 6 ]
initial
begin
	OPERANDO1[6] = 1'b1;
	OPERANDO1[6] = #320000 1'b0;
end 
// OPERANDO1[ 5 ]
initial
begin
	OPERANDO1[5] = 1'b1;
	OPERANDO1[5] = #640000 1'b0;
	OPERANDO1[5] = #320000 1'b1;
end 
// OPERANDO1[ 4 ]
initial
begin
	OPERANDO1[4] = 1'b0;
	OPERANDO1[4] = #640000 1'b1;
	OPERANDO1[4] = #320000 1'b0;
end 
// OPERANDO1[ 3 ]
initial
begin
	OPERANDO1[3] = 1'b1;
	OPERANDO1[3] = #320000 1'b0;
	OPERANDO1[3] = #320000 1'b1;
end 
// OPERANDO1[ 2 ]
initial
begin
	OPERANDO1[2] = 1'b0;
	OPERANDO1[2] = #320000 1'b1;
	OPERANDO1[2] = #320000 1'b0;
end 
// OPERANDO1[ 1 ]
initial
begin
	OPERANDO1[1] = 1'b1;
	OPERANDO1[1] = #640000 1'b0;
end 
// OPERANDO1[ 0 ]
initial
begin
	OPERANDO1[0] = 1'b0;
end 

// H
initial
begin
	H = 1'b1;
	H = #140000 1'b0;
	H = #10000 1'b1;
	H = #340000 1'b0;
	H = #10000 1'b1;
	H = #330000 1'b0;
	H = #10000 1'b1;
end 

// Z
initial
begin
	Z = 1'b0;
end 

// RST
initial
begin
	RST = 1'b1;
end 
endmodule

