// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/21/2019 12:59:43"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          blocksumador8
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module blocksumador8_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CARRY_IN;
reg [0:7] INPUTA;
reg [0:7] INPUTB;
// wires                                               
wire CARRY;
wire [0:7] RESULT;

// assign statements (if any)                          
blocksumador8 i1 (
// port map - connection between master ports and signals/registers   
	.CARRY(CARRY),
	.CARRY_IN(CARRY_IN),
	.INPUTA(INPUTA),
	.INPUTB(INPUTB),
	.RESULT(RESULT)
);
initial 
begin 
#1000000 $finish;
end 

// CARRY_IN
initial
begin
	CARRY_IN = 1'b0;
end 
// INPUTA[ 7 ]
initial
begin
	INPUTA[7] = 1'b1;
	INPUTA[7] = #50000 1'b0;
	INPUTA[7] = #250000 1'b1;
	INPUTA[7] = #200000 1'b0;
	INPUTA[7] = #100000 1'b1;
	INPUTA[7] = #50000 1'b0;
	INPUTA[7] = #100000 1'b1;
end 
// INPUTA[ 6 ]
initial
begin
	INPUTA[6] = 1'b1;
	INPUTA[6] = #100000 1'b0;
	INPUTA[6] = #150000 1'b1;
	INPUTA[6] = #100000 1'b0;
	INPUTA[6] = #100000 1'b1;
	INPUTA[6] = #150000 1'b0;
	INPUTA[6] = #100000 1'b1;
	INPUTA[6] = #100000 1'b0;
	INPUTA[6] = #150000 1'b1;
end 
// INPUTA[ 5 ]
initial
begin
	INPUTA[5] = 1'b0;
	INPUTA[5] = #50000 1'b1;
	INPUTA[5] = #50000 1'b0;
	INPUTA[5] = #50000 1'b1;
	INPUTA[5] = #50000 1'b0;
	INPUTA[5] = #150000 1'b1;
	INPUTA[5] = #50000 1'b0;
	INPUTA[5] = #50000 1'b1;
	INPUTA[5] = #200000 1'b0;
	INPUTA[5] = #100000 1'b1;
	INPUTA[5] = #50000 1'b0;
	INPUTA[5] = #50000 1'b1;
	INPUTA[5] = #50000 1'b0;
end 
// INPUTA[ 4 ]
initial
begin
	INPUTA[4] = 1'b1;
	INPUTA[4] = #50000 1'b0;
	INPUTA[4] = #50000 1'b1;
	INPUTA[4] = #150000 1'b0;
	INPUTA[4] = #50000 1'b1;
	INPUTA[4] = #50000 1'b0;
	INPUTA[4] = #150000 1'b1;
	INPUTA[4] = #100000 1'b0;
	INPUTA[4] = #150000 1'b1;
	INPUTA[4] = #50000 1'b0;
	INPUTA[4] = #150000 1'b1;
end 
// INPUTA[ 3 ]
initial
begin
	INPUTA[3] = 1'b0;
	INPUTA[3] = #100000 1'b1;
	INPUTA[3] = #100000 1'b0;
	INPUTA[3] = #50000 1'b1;
	INPUTA[3] = #50000 1'b0;
	INPUTA[3] = #50000 1'b1;
	INPUTA[3] = #200000 1'b0;
	INPUTA[3] = #150000 1'b1;
	INPUTA[3] = #50000 1'b0;
	INPUTA[3] = #50000 1'b1;
	INPUTA[3] = #100000 1'b0;
	INPUTA[3] = #50000 1'b1;
end 
// INPUTA[ 2 ]
initial
begin
	INPUTA[2] = 1'b0;
	INPUTA[2] = #250000 1'b1;
	INPUTA[2] = #50000 1'b0;
	INPUTA[2] = #100000 1'b1;
	INPUTA[2] = #300000 1'b0;
	INPUTA[2] = #200000 1'b1;
end 
// INPUTA[ 1 ]
initial
begin
	INPUTA[1] = 1'b0;
	INPUTA[1] = #50000 1'b1;
	INPUTA[1] = #50000 1'b0;
	INPUTA[1] = #200000 1'b1;
	INPUTA[1] = #50000 1'b0;
	INPUTA[1] = #50000 1'b1;
	INPUTA[1] = #250000 1'b0;
	INPUTA[1] = #100000 1'b1;
	INPUTA[1] = #50000 1'b0;
end 
// INPUTA[ 0 ]
initial
begin
	INPUTA[0] = 1'b0;
	INPUTA[0] = #50000 1'b1;
	INPUTA[0] = #100000 1'b0;
	INPUTA[0] = #200000 1'b1;
	INPUTA[0] = #50000 1'b0;
	INPUTA[0] = #50000 1'b1;
	INPUTA[0] = #100000 1'b0;
	INPUTA[0] = #150000 1'b1;
	INPUTA[0] = #150000 1'b0;
end 
// INPUTB[ 7 ]
initial
begin
	INPUTB[7] = 1'b0;
end 
// INPUTB[ 6 ]
initial
begin
	INPUTB[6] = 1'b0;
end 
// INPUTB[ 5 ]
initial
begin
	INPUTB[5] = 1'b0;
end 
// INPUTB[ 4 ]
initial
begin
	INPUTB[4] = 1'b0;
end 
// INPUTB[ 3 ]
initial
begin
	INPUTB[3] = 1'b0;
end 
// INPUTB[ 2 ]
initial
begin
	INPUTB[2] = 1'b0;
end 
// INPUTB[ 1 ]
initial
begin
	INPUTB[1] = 1'b1;
end 
// INPUTB[ 0 ]
initial
begin
	INPUTB[0] = 1'b0;
end 
endmodule

