// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/20/2019 17:26:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          SHIFTBOX
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module SHIFTBOX_vlg_vec_tst();
// constants                                           
// general purpose registers
reg BITIN;
reg [31:0] DATAIN;
// wires                                               
wire BITOUT;
wire [31:0] DATAOUT;

// assign statements (if any)                          
SHIFTBOX i1 (
// port map - connection between master ports and signals/registers   
	.BITIN(BITIN),
	.BITOUT(BITOUT),
	.DATAIN(DATAIN),
	.DATAOUT(DATAOUT)
);
initial 
begin 
#1000000 $finish;
end 

// BITIN
initial
begin
	BITIN = 1'b0;
end 
// DATAIN[ 31 ]
initial
begin
	DATAIN[31] = 1'b1;
end 
// DATAIN[ 30 ]
initial
begin
	DATAIN[30] = 1'b1;
end 
// DATAIN[ 29 ]
initial
begin
	DATAIN[29] = 1'b1;
end 
// DATAIN[ 28 ]
initial
begin
	DATAIN[28] = 1'b1;
end 
// DATAIN[ 27 ]
initial
begin
	DATAIN[27] = 1'b1;
end 
// DATAIN[ 26 ]
initial
begin
	DATAIN[26] = 1'b1;
end 
// DATAIN[ 25 ]
initial
begin
	DATAIN[25] = 1'b1;
end 
// DATAIN[ 24 ]
initial
begin
	DATAIN[24] = 1'b1;
end 
// DATAIN[ 23 ]
initial
begin
	DATAIN[23] = 1'b1;
end 
// DATAIN[ 22 ]
initial
begin
	DATAIN[22] = 1'b1;
end 
// DATAIN[ 21 ]
initial
begin
	DATAIN[21] = 1'b1;
end 
// DATAIN[ 20 ]
initial
begin
	DATAIN[20] = 1'b1;
end 
// DATAIN[ 19 ]
initial
begin
	DATAIN[19] = 1'b1;
end 
// DATAIN[ 18 ]
initial
begin
	DATAIN[18] = 1'b1;
end 
// DATAIN[ 17 ]
initial
begin
	DATAIN[17] = 1'b1;
end 
// DATAIN[ 16 ]
initial
begin
	DATAIN[16] = 1'b1;
end 
// DATAIN[ 15 ]
initial
begin
	DATAIN[15] = 1'b1;
end 
// DATAIN[ 14 ]
initial
begin
	DATAIN[14] = 1'b1;
end 
// DATAIN[ 13 ]
initial
begin
	DATAIN[13] = 1'b1;
end 
// DATAIN[ 12 ]
initial
begin
	DATAIN[12] = 1'b1;
end 
// DATAIN[ 11 ]
initial
begin
	DATAIN[11] = 1'b1;
end 
// DATAIN[ 10 ]
initial
begin
	DATAIN[10] = 1'b1;
end 
// DATAIN[ 9 ]
initial
begin
	DATAIN[9] = 1'b1;
end 
// DATAIN[ 8 ]
initial
begin
	DATAIN[8] = 1'b1;
end 
// DATAIN[ 7 ]
initial
begin
	DATAIN[7] = 1'b1;
end 
// DATAIN[ 6 ]
initial
begin
	DATAIN[6] = 1'b1;
end 
// DATAIN[ 5 ]
initial
begin
	DATAIN[5] = 1'b1;
end 
// DATAIN[ 4 ]
initial
begin
	DATAIN[4] = 1'b1;
end 
// DATAIN[ 3 ]
initial
begin
	DATAIN[3] = 1'b1;
end 
// DATAIN[ 2 ]
initial
begin
	DATAIN[2] = 1'b1;
end 
// DATAIN[ 1 ]
initial
begin
	DATAIN[1] = 1'b1;
end 
// DATAIN[ 0 ]
initial
begin
	DATAIN[0] = 1'b1;
end 
endmodule

